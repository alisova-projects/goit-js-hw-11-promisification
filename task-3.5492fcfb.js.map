{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","delay","canProcess","Promise","resolve","reject","setTimeout","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";;;AA4EA,aA5EA,QAAA,qBAUA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAAY,GAATC,IAAAA,EAAAA,EAAAA,GACnBC,EAAQR,EAA0B,IAAK,KACvCS,EAAaN,KAAKE,SAAW,GAE5B,OAAA,IAAIK,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACLJ,GACFE,EAAQ,CAAEJ,GAAAA,EAAIC,MAAAA,IAEhBI,EAAOL,IACNC,MAIDM,EAAa,SAAiB,GAAfP,IAAAA,EAAAA,EAAAA,GAAIC,EAAAA,EAAAA,MACvBO,QAAQC,IAAmBT,eAAAA,OAAAA,EAAmBC,kBAAAA,OAAAA,EAA9C,SAGIS,EAAW,SAAAV,GACfQ,QAAQG,KAAqCX,gCAAAA,OAAAA,EAA7C,+BA+BFD,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ","file":"task-3.5492fcfb.js","sourceRoot":"..\\src","sourcesContent":["import '../css/common.css';\r\n\r\n/*\r\nЗадание 3\r\n\r\nПерепиши функцию makeTransaction() так,\r\nчтобы она не использовала callback-функции onSuccess и onError,\r\nа принимала всего один параметр transaction и возвращала промис.\r\n*/\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({ id }) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve({ id, delay });\r\n      }\r\n      reject(id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({id, delay}) => {\r\n  console.log(`Transaction ${id} processed in ${delay} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\nРаботает так:\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      onSuccess(transaction.id, delay);\r\n    } else {\r\n      onError(transaction.id);\r\n    }\r\n  }, delay);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n*/\r\n\r\n\r\n\r\n/*\r\n * Должно работать так\r\n */\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"]}