{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","canProcess","setTimeout","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.eadbda9b.js","sourceRoot":"..\\src","sourcesContent":["import '../css/common.css';\r\n\r\n/*\r\nЗадание 1\r\n\r\nНапиши функцию delay(ms), которая возвращает промис,\r\nпереходящий в состояние \"resolved\" через ms миллисекунд.\r\nЗначением исполнившегося промиса должно быть то кол-во миллисекунд,\r\nкоторое передали во время вызова функции delay.\r\n*/\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  return new Promise((resolve, reject) => {\r\n    resolve(ms);\r\n  })  \r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","import '../css/common.css';\r\n\r\n/*\r\nЗадание 2\r\n\r\nПерепиши функцию toggleUserState() так,\r\nчтобы она не использовала callback-функцию callback,\r\nа принимала всего два параметра allUsers и userName\r\nи возвращала промис.\r\n*/\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user);\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    resolve(updatedUsers);\r\n  });\r\n}\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\n/*\r\nСейчас работает так:\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n*/\r\n\r\n/*\r\n * Должно работать так\r\n */\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","import '../css/common.css';\r\n\r\n/*\r\nЗадание 3\r\n\r\nПерепиши функцию makeTransaction() так,\r\nчтобы она не использовала callback-функции onSuccess и onError,\r\nа принимала всего один параметр transaction и возвращала промис.\r\n*/\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({ id }) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve({ id, delay });\r\n      }\r\n      reject(id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({id, delay}) => {\r\n  console.log(`Transaction ${id} processed in ${delay} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\nРаботает так:\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      onSuccess(transaction.id, delay);\r\n    } else {\r\n      onError(transaction.id);\r\n    }\r\n  }, delay);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n*/\r\n\r\n\r\n\r\n/*\r\n * Должно работать так\r\n */\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);","import './css/common.css';\r\n\r\nimport './js/task-1';\r\nimport './js/task-2';\r\nimport './js/task-3';"]}